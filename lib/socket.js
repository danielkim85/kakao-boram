const kakao = require('./kakao');
const mysql = require('./mysql');
const push = require('./push');
const os = require('os');

const debug = os.hostname() === 'DK-MBP';

let allowedUsers = {
  1255050703 : {
    accessToken : undefined,
    socket : undefined,
    uuid : 'xvTN_M_5z_zF6dju2eDY7t7s2fXG_svzw_B1',
    isMobile : false
  }  // danny
};
if(debug) {
  allowedUsers[1255961938] = {
    accessToken: undefined,
    socket: undefined,
    isMobile: false
  }; // danny test
}
else {
  allowedUsers[1255150518] = {
    accessToken: undefined,
    socket: undefined,
    uuid: 'xvLA8cn6yvrP49Hl1-_d5NDp0PzP98L6yvl5',
    isMobile: false
  }; // boram
}

let socketProfileMap = {};

const validateToken = async function(accessToken,userId){
  const profile = await kakao.validateToken(accessToken,userId);

  //profile id generated by accessToken does not match, illegal access.
  if(!profile || !allowedUsers[profile.id]){
    return false;
  }

  //token changed
  if(allowedUsers[profile.id].accessToken !== accessToken){
     allowedUsers[profile.id].accessToken = accessToken;
    mysql.updateUser(profile.id,profile.properties.nickname,profile.properties.thumbnail_image);
  }
  return true;
};

const socket =  function(http,server){
  const io = require('socket.io')(http);
  io.listen(server);

  io.on('connection', function(socket){
    socket.on('join',async function(data){
      if(!validateToken(data.accessToken,data.userId)){
        return;
      }

      //before joining, kick the currently logged in user
      if(allowedUsers[data.userId].socket){
        io.to(allowedUsers[data.userId].socket).emit('logout');
      }
      //refresh socket id registry
      allowedUsers[data.userId].socket = socket.id;
      allowedUsers[data.userId].isMobile = data.isMobile;
      socketProfileMap[socket.id] = data.userId;

      socket.join('main');
      const messages = await mysql.getMessages().catch(function(err){
        console.error(err);
        socket.emit('errorMsg',err);
      });
      socket.emit('socketRdy',messages);
    });

    socket.on('msg',function(data){

      if(!allowedUsers[data.profile.userId]){
        return;
      }

      if(allowedUsers[data.profile.userId].accessToken !== data.profile.accessToken){
        //TODO refresh with message in query param
        socket.emit('refresh');
        return;
      }

      //console.info(io.sockets.adapter.rooms['main'].sockets);

      mysql.insertMessage(data.profile.userId,data.msg);
      io.to('main').emit('msg',{
        userId : data.profile.userId,
        nickname : data.profile.nickname,
        thumbnailImage : data.profile.thumbnailImage,
        message : data.msg,
        timestamp : new Date()
      });

      //send kakao notify
      let uuidArr = [];
      for (const prop in allowedUsers){
        if(!allowedUsers[prop].socket){
          const uuid = allowedUsers[prop].uuid;
          uuidArr.push(uuid);
        }
      }

      if(uuidArr.length === 0){
        return;
      }
      io.to(allowedUsers[data.profile.userId].socket).emit('kakaoNotify',{
        uuid:uuidArr,
        msg:data.msg
      });
    });

    socket.on('push',function(subscription,data){
      push.send(subscription,data);
    });


    socket.on('logout', function(profileId){
      if( allowedUsers[profileId]) {
        allowedUsers[profileId].socket = undefined;
      }
    });

    socket.on('disconnect', function() {
      socket.leave('main');
      const profileId = socketProfileMap[socket.id];
      delete socketProfileMap[socket.id];

      if( allowedUsers[profileId]) {
        allowedUsers[profileId].socket = undefined;
      }
    });

    socket.on('debug', function(){
      socket.emit('debug',
        { sockets : io.sockets.adapter.rooms['main'].sockets,
          allowedUsers : allowedUsers
        });
    });

  });

  return io;
};

module.exports = socket;
